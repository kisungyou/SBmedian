library(SBmedian)
devtools::document()
library(SBmedian)
library(SBmedian)
library(SBmedian)
library(SBmedian)
library(SBmedian)
##' subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
##' library(Mposterior)
##' medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
##' medPosterior
##' summary(medPosterior)
##' plot(medPosterior)
##' @author Sanvesh Srivastava \email{sanvesh@@gmail.com}
##' @references
##' Minsker, S., Srivastava, S., Lin, L., and Dunson, D.B. (2014). Robust and Scalable Bayes via a Median of Subset Posterior Measures. \url{http://arxiv.org/abs/1403.2660}
##' @export
findWeiszfeldMedian <- function (subsetAtomsList, sigma = 0.1, maxit = 100, tol = 1e-10) {
if (length(subsetAtomsList) <= 1 | class(subsetAtomsList) != "list") {
stop("subset posteriors must be a list of length > 1", call. = FALSE, domain = NULL)
}
if (class(subsetAtomsList[[1]]) == "matrix" & length(subsetAtomsList) > 1) {
medMeasure <- .Call('Mposterior_findWeiszfeldMedian', PACKAGE = 'Mposterior', subsetAtomsList, sigma, maxit, tol)
medMeasure$sigma <- sigma
medMeasure$maxit <- maxit
class(medMeasure) <- c("Mposterior", "list")
} else {
stop("subset posteriors must be a list matrices", call. = FALSE, domain = NULL)
}
medMeasure
}
##' subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
##' library(Mposterior)
##' medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
##' medPosterior
##' summary(medPosterior)
##' plot(medPosterior)
##' @author Sanvesh Srivastava \email{sanvesh@@gmail.com}
##' @references
##' Minsker, S., Srivastava, S., Lin, L., and Dunson, D.B. (2014). Robust and Scalable Bayes via a Median of Subset Posterior Measures. \url{http://arxiv.org/abs/1403.2660}
##' @export
findWeiszfeldMedian <- function (subsetAtomsList, sigma = 0.1, maxit = 100, tol = 1e-10) {
if (length(subsetAtomsList) <= 1 | class(subsetAtomsList) != "list") {
stop("subset posteriors must be a list of length > 1", call. = FALSE, domain = NULL)
}
if (class(subsetAtomsList[[1]]) == "matrix" & length(subsetAtomsList) > 1) {
medMeasure <- .Call('Mposterior_findWeiszfeldMedian', PACKAGE = 'Mposterior', subsetAtomsList, sigma, maxit, tol)
medMeasure$sigma <- sigma
medMeasure$maxit <- maxit
class(medMeasure) <- c("Mposterior", "list")
} else {
stop("subset posteriors must be a list matrices", call. = FALSE, domain = NULL)
}
medMeasure
}
library(SBmedian)
set.seed(12345)
## list that contains subset posterior samples from 2-dim Gaussian density
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
library(Mposterior)
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
medPosterior
summary(medPosterior)
plot(medPosterior)
library(SBmedian)
set.seed(12345)
## list that contains subset posterior samples from 2-dim Gaussian density
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
library(SBmedian)
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
devtools::document()
library(SBmedian)
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
library(SBmedian)
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
library(SBmedian)
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
library(SBmedian)
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
medPosterior
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
medPosterior
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
medPosterior
library(SBmedian)
library(SBmedian)
library(SBmedian)
set.seed(12345)
## list that contains subset posterior samples from 2-dim Gaussian density
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
library(SBmedian)
medPosterior <- findWeiszfeldMedian(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
library(SBmedian)
devtools::document()
library(SBmedian)
library(SBmedian)
library(SBmedian)
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
medPosterior <- findWeiszfeldMedianR(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
medPosterior
medPosterior$weiszfeldWts
subAtomList <- vector("list", 5)
subAtomList[[1]] <- cbind(rnorm(100, mean = 1),  rnorm(100, mean = 1))
subAtomList[[2]] <- cbind(rnorm(89, mean = -1),  rnorm(89, mean= -1))
subAtomList[[3]] <- cbind(rnorm(100, mean = -1),  rnorm(100, mean = 1))
subAtomList[[4]] <- cbind(rnorm(98, mean = 1),  rnorm(98, mean = -1))
subAtomList[[5]] <- cbind(rnorm(100, mean = 2),  rnorm(100, mean = 2))
medPosterior <- findWeiszfeldMedianR(subAtomList, sigma = 0.1, maxit = 100, tol = 1e-10)
medPosterior$weiszfeldWts
atomlist = subAtomList
help(lapply)
lapply(atomlist, inherits, "vector")
lapply(atomlist, inherits, "matrix")
library(SBmedian)
library(SBmedian)
medPosterior = mposterior(atomlist, show.progress = TRUE)
library(SBmedian)
medPosterior = mposterior(atomlist, show.progress = TRUE)
library(SBmedian)
medPosterior = mposterior(atomlist, show.progress = TRUE)
library(SBmedian)
medPosterior = mposterior(atomlist, show.progress = TRUE)
medMeasure = medPosterior
medMeasure$medianAtoms
medMeasure$natoms
medMeasure$weiszfeldWts
medMeasure$historyWeiszfeldWts
natoms = as.vector(medMeasure$natoms)
med.weights = c()
for (i in 1:length(natoms)){
med.weights = c(med.weights, rep(1/natoms[i], natoms[i])*medMeasure$weiszfeldWts[i])
}
sum(med.weights)
med.weights
# 3. weiszfeld.weights
output$weiszfeld.weights = as.vector(medMeasure$weiszfeldWts)
as.vector(medMeasure$weiszfeldWts)
help(matplot)
xx = matrix(rnorm(10*3),ncol=3)
matplot(xx)
medMeasure$historyWeiszfeldWts
## Manipulating the returned output
output = list()
# 1. med.atoms : median atoms which are collection of all atoms
if (vflag){
output$med.atoms = as.vector(medMeasure$medianAtoms) # case : numbers in a vector
} else {
output$med.atoms = medMeasure$medianAtoms            # case : vectors row-stacked matrix
}
# 2. med.weights
natoms = as.vector(medMeasure$natoms)
med.weights = c()
for (i in 1:length(natoms)){
med.weights = c(med.weights, rep(1/natoms[i], natoms[i])*medMeasure$weiszfeldWts[i])
}
output$med.weights = med.weights
# 3. weiszfeld.weights
output$weiszfeld.weights = as.vector(medMeasure$weiszfeldWts)
# 4. weiszfeld.history
output$weiszfeld.history = t(medMeasure$historyWeiszfeldWts)
rownames(output$weiszfeld.history) = paste("iteration ",1:ncol(medMeasure$historyWeiszfeldWts))
output$weiszfeld.history
rownames(output$weiszfeld.history) = paste("iteration",1:ncol(medMeasure$historyWeiszfeldWts))
matplot(output$weiszfeld.history)
medMeasure$natoms
library(SBmedian)
plot(subAtomList[[1]], col=1, type="p")
mycex = 0.5
plot(subAtomList[[1]], col=1, type="p", cex=mycex, pch=19)
points(subAtomList[[2]], col=2, pch=19, cex=mycex)
points(subAtomList[[3]], col=3, pch=19, cex=mycex)
points(subAtomList[[4]], col=4, pch=19, cex=mycex)
points(subAtomList[[5]], col=5, pch=19, cex=mycex)
points(subAtomList[[2]], col=2, pch=19, cex=mycex, type="p")
x11()
par(mfrow=c(1,5))
mycex = 0.5
plot(subAtomList[[1]], col=1, type="p", cex=mycex, pch=19, xlim=c(-2,4), ylim=c(-2,4))
plot(subAtomList[[2]], col=2, pch=19, cex=mycex, type="p", xlim=c(-2,4), ylim=c(-2,4))
plot(subAtomList[[3]], col=3, pch=19, cex=mycex, type="p", xlim=c(-2,4), ylim=c(-2,4))
plot(subAtomList[[4]], col=4, pch=19, cex=mycex, type="p", xlim=c(-2,4), ylim=c(-2,4))
plot(subAtomList[[5]], col=5, pch=19, cex=mycex, type="p", xlim=c(-2,4), ylim=c(-2,4))
library(SBmedian)
library(SBmedian)
help("mposterior")
library(SBmedian)
x11()
par(mfrow=c(1,5))
mycex = 0.5
plot(subAtomList[[1]], col=1, type="p", cex=mycex, pch=19, xlim=c(-2,4), ylim=c(-2,4))
plot(subAtomList[[2]], col=2, pch=19, cex=mycex, type="p", xlim=c(-2,4), ylim=c(-2,4))
plot(subAtomList[[3]], col=3, pch=19, cex=mycex, type="p", xlim=c(-2,4), ylim=c(-2,4))
plot(subAtomList[[4]], col=4, pch=19, cex=mycex, type="p", xlim=c(-2,4), ylim=c(-2,4))
plot(subAtomList[[5]], col=5, pch=19, cex=mycex, type="p", xlim=c(-2,4), ylim=c(-2,4))
#  Step 1. let's build a list of atoms
mydata = list()
mydata[[1]] = cbind(rnorm(50, mean= 1), rnorm(50, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean=-1))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean= 2))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
plot(mydata[[1]], cex=0.5, col=2, pch=19, xlab="", ylab="", main="subset 1")
opar <- par(mfrow=c(2,3))
plot(mydata[[1]], cex=0.5, col=2, pch=19, xlab="", ylab="", main="subset 1")
plot(mydata[[2]], cex=0.5, col=3, pch=19, xlab="", ylab="", main="subset 2")
plot(mydata[[3]], cex=0.5, col=4, pch=19, xlab="", ylab="", main="subset 3")
plot(mydata[[4]], cex=0.5, col=5, pch=19, xlab="", ylab="", main="subset 4")
opar <- par(mfrow=c(2,3), pty="s")
plot(mydata[[1]], cex=0.5, col=2, pch=19, xlab="", ylab="", main="subset 1")
plot(mydata[[2]], cex=0.5, col=3, pch=19, xlab="", ylab="", main="subset 2")
plot(mydata[[3]], cex=0.5, col=4, pch=19, xlab="", ylab="", main="subset 3")
plot(mydata[[4]], cex=0.5, col=5, pch=19, xlab="", ylab="", main="subset 4")
mydata = list()
mydata[[1]] = cbind(rnorm(96, mean= 1), rnorm(96, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean= 0))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean=-1))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
#  Step 3. Visualize
opar <- par(mfrow=c(2,3), pty="s")
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i))
}
myxlim = unlist(lapply(mydata, min))
myxlim
set.seed(8128)                   # for reproducible results
mydata = list()
mydata[[1]] = cbind(rnorm(96, mean= 1), rnorm(96, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean= 0))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean=-1))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
#  Step 3. Visualize
opar <- par(mfrow=c(2,3), pty="s")
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i))
}
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i))
}
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i))
}
graphics.off()
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i))
}
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i), xlim=c(-4,4), ylim=(-3,3))
}
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i), xlim=c(-4,4), ylim=c(-3,3))
}
myrun$med.weights
dim(myrun$med.atoms)
help(sample)
id100 = base::sample(1:nrow(myrun$med.atoms), 100, prob=myrun$med.weights, replace=TRUE)
sp100 = myrun$med.atoms[id100,]
## Median Posteior from 2-D Gaussian Samples
#  Step 1. let's build a list of atoms whose numbers differ
set.seed(8128)                   # for reproducible results
mydata = list()
mydata[[1]] = cbind(rnorm(96, mean= 1), rnorm(96, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean= 0))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean=-1))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
#  Step 3. Visualize
#  3-1. show subset posterior samples
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i), xlim=c(-4,4), ylim=c(-3,3))
}
#  3-2. 100 median posterior samples via importance sampling
id100 = base::sample(1:nrow(myrun$med.atoms), 100, prob=myrun$med.weights, replace=TRUE)
sp100 = myrun$med.atoms[id100,]
plot(sp100, cex=0.5, pch=19, xlab="", ylab="",
xlim=c(-4,4), ylim=c(-3,3), main="")
help(matplot)
matplot(myrun$weiszfeld.history)
matplot(myrun$weiszfeld.history, xlab="iteration", ylab="value",
type="b")
matplot(myrun$weiszfeld.history, xlab="iteration", ylab="value",
type="b", main="convergence of weights")
## Median Posteior from 2-D Gaussian Samples
#  Step 1. let's build a list of atoms whose numbers differ
set.seed(8128)                   # for reproducible results
mydata = list()
mydata[[1]] = cbind(rnorm(96, mean= 1), rnorm(96, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean= 0))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean=-1))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
#  Step 3. Visualize
#  3-1. show subset posterior samples
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i), xlim=c(-4,4), ylim=c(-3,3))
}
#  3-2. 100 median posterior samples via importance sampling
id100 = base::sample(1:nrow(myrun$med.atoms), 100, prob=myrun$med.weights, replace=TRUE)
sp100 = myrun$med.atoms[id100,]
plot(sp100, cex=0.5, pch=19, xlab="", ylab="",
xlim=c(-4,4), ylim=c(-3,3), main="median samples")
#  3-3. convergence over iterations
matplot(myrun$weiszfeld.history, xlab="iteration", ylab="value",
type="b", main="convergence of weights")
library(SBmedian)
library(SBmedian)
library(SBmedian)
#  Step 1. let's build a list of atoms whose numbers differ
set.seed(8128)                   # for reproducible results
mydata = list()
mydata[[1]] = cbind(rnorm(96, mean= 1), rnorm(96, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean= 0))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean=-1))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
#  Step 3. Visualize
#  3-1. show subset posterior samples
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i), xlim=c(-4,4), ylim=c(-3,3))
}
#  3-2. 100 median posterior samples via importance sampling
id100 = base::sample(1:nrow(myrun$med.atoms), 100, prob=myrun$med.weights, replace=TRUE)
sp100 = myrun$med.atoms[id100,]
plot(sp100, cex=0.5, pch=19, xlab="", ylab="",
xlim=c(-4,4), ylim=c(-3,3), main="median samples")
#  3-3. convergence over iterations
matplot(myrun$weiszfeld.history, xlab="iteration", ylab="value",
type="b", main="convergence of weights")
library(SBmedian)
library(SBmedian)
help(mposterior)
library(SBmedian)
set.seed(8128)                   # for reproducible results
mydata = list()
mydata[[1]] = cbind(rnorm(96, mean= 1), rnorm(96, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean= 0))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean=-1))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
#  Step 3. Visualize
#  3-1. show subset posterior samples
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i), xlim=c(-4,4), ylim=c(-3,3))
}
#  3-2. 100 median posterior samples via importance sampling
id100 = base::sample(1:nrow(myrun$med.atoms), 100, prob=myrun$med.weights, replace=TRUE)
sp100 = myrun$med.atoms[id100,]
plot(sp100, cex=0.5, pch=19, xlab="", ylab="",
xlim=c(-4,4), ylim=c(-3,3), main="median samples")
#  3-3. convergence over iterations
matplot(myrun$weiszfeld.history, xlab="iteration", ylab="value",
type="b", main="convergence of weights")
myrun$weiszfeld.weights
myrun$weiszfeld.history
id100 = base::sample(1:nrow(myrun$med.atoms), 300, prob=myrun$med.weights, replace=TRUE)
sp100 = myrun$med.atoms[id100,]
plot(sp100, cex=0.5, pch=19, xlab="", ylab="",
xlim=c(-4,4), ylim=c(-3,3), main="median samples")
graphics.off()
#  Step 1. let's build a list of atoms whose numbers differ
set.seed(8128)                   # for reproducible results
mydata = list()
mydata[[1]] = cbind(rnorm(96, mean= 1), rnorm(96, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean= 0))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean=-1))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
#  Step 3. Visualize
#  3-1. show subset posterior samples
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i), xlim=c(-4,4), ylim=c(-3,3))
}
#  3-2. 250 median posterior samples via importance sampling
id250 = base::sample(1:nrow(myrun$med.atoms), 250, prob=myrun$med.weights, replace=TRUE)
sp250 = myrun$med.atoms[id250,]
plot(sp100, cex=0.5, pch=19, xlab="", ylab="",
xlim=c(-4,4), ylim=c(-3,3), main="median samples")
#  3-3. convergence over iterations
matplot(myrun$weiszfeld.history, xlab="iteration", ylab="value",
type="b", main="convergence of weights")
library(SBmedian)
library(SBmedian)
library(SBmedian)
library(SBmedian)
library(SBmedian)
library(SBmedian)
packageVersion("RcppAramdillo")
packageVersion("RcppAramdillo",lib.loc = )
packageVersion("RcppAramdillo",lib.loc = ())
help(packageVersion)
library(SBmedian)
library(SBmedian)
library(SBmedian)
help(mposterior)
library(SBmedian)
library(SBmedian)
rm(list=ls())
library(SBmedian)
## Median Posteior from 2-D Gaussian Samples
#  Step 1. let's build a list of atoms whose numbers differ
set.seed(8128)                   # for reproducible results
mydata = list()
mydata[[1]] = cbind(rnorm(96, mean= 1), rnorm(96, mean= 1))
mydata[[2]] = cbind(rnorm(78, mean=-1), rnorm(78, mean= 0))
mydata[[3]] = cbind(rnorm(65, mean=-1), rnorm(65, mean= 1))
mydata[[4]] = cbind(rnorm(77, mean= 2), rnorm(77, mean=-1))
#  Step 2. Let's run the algorithm
myrun = mposterior(mydata, show.progress=TRUE)
#  Step 3. Visualize
#  3-1. show subset posterior samples
opar <- par(mfrow=c(2,3))
for (i in 1:4){
plot(mydata[[i]], cex=0.5, col=(i+1), pch=19, xlab="", ylab="",
main=paste("subset",i), xlim=c(-4,4), ylim=c(-3,3))
}
#  3-2. 250 median posterior samples via importance sampling
id250 = base::sample(1:nrow(myrun$med.atoms), 250, prob=myrun$med.weights, replace=TRUE)
sp250 = myrun$med.atoms[id250,]
plot(sp250, cex=0.5, pch=19, xlab="", ylab="",
xlim=c(-4,4), ylim=c(-3,3), main="median samples")
#  3-3. convergence over iterations
matplot(myrun$weiszfeld.history, xlab="iteration", ylab="value",
type="b", main="convergence of weights")
library(SBmedian)
